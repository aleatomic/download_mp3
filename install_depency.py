#Importamos las librerias necesarias
import os #Para manejar archivos y directorios
import subprocess #Para ejecutar comandos en la terminal
import zipfile #Para extraer archivos ZIP
import requests #Para descargar archivos desde internet de ser necesario

FFMPEG_URL = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-n6.1-latest-win64-gpl.zip"
INSTALL_PATH = "C:\\ffmpeg"
BIN_PATH = os.path.join(INSTALL_PATH, "bin") # Ruta de la carpeta "bin" de FFmpeg, donde contiene los ejecutables

#Funcion 
def is_ffmpeg_installed():
    """Verifica si FFmpeg est√° instalado ejecutando 'ffmpeg -version'."""
    #Intentamos ejecutar el comando ffmpeg -version, si no funciona, devolvemos False, y significa que no est√° instalado
    try:
        subprocess.run(["ffmpeg", "-version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        print("‚úÖ FFmpeg ya est√° instalado.")
        return True
    except FileNotFoundError:
        return False

# Funcion para descargar FFmpeg
def download_ffmpeg():
    """Descarga FFmpeg desde el enlace especificado."""
    print("üîΩ Descargando FFmpeg...")
    response = requests.get(FFMPEG_URL, stream=True) # usa stream=True para descargar grandes archivos
    zip_path = "ffmpeg.zip"

    with open(zip_path, "wb") as file:
        for chunk in response.iter_content(1024):
            file.write(chunk)

    print("‚úÖ Descarga completada.")
    return zip_path

# Funcion para extraer FFmpeg
def extract_ffmpeg(zip_path):
    """Extrae FFmpeg en la ruta de instalaci√≥n."""
    print("üìÇ Extrayendo archivos...")
    with zipfile.ZipFile(zip_path, "r") as zip_ref:
        zip_ref.extractall(INSTALL_PATH)

    # La carpeta extra√≠da tiene un nombre largo, movemos solo el contenido de "bin"
    extracted_folder = os.path.join(INSTALL_PATH, os.listdir(INSTALL_PATH)[0], "bin")
    
    # Si la carpeta "bin" no existe, movemos los archivos correctos
    if not os.path.exists(BIN_PATH):
        os.rename(extracted_folder, BIN_PATH)

    os.remove(zip_path)  # Eliminar el ZIP descargado
    print("‚úÖ Extracci√≥n completada.")

# Funcion para agregar FFmpeg al PATH
def add_to_path():
    """Agrega FFmpeg a las variables de entorno del sistema."""
    print("üõ†Ô∏è Configurando FFmpeg en PATH...")

    path_var = os.environ.get("PATH", "")
    
    #Verificamos si la carpeta "bin" de FFmpeg ya est√° en PATH o no
    if BIN_PATH not in path_var:
        subprocess.run(f'setx PATH "{path_var};{BIN_PATH}"', shell=True)
        print("‚úÖ FFmpeg agregado al PATH. Reinicia la terminal para aplicar cambios.")
    else:
        print("‚ö†Ô∏è FFmpeg ya est√° en PATH.")

# Funcion principal
def main():
    # Revisamos si FFmpeg ya est√° instalado, si no, lo descargamos
    if not is_ffmpeg_installed():
        zip_path = download_ffmpeg()
        extract_ffmpeg(zip_path)
        add_to_path()
        print("üéâ Instalaci√≥n completada. Reinicia tu terminal para aplicar los cambios.")
    else:
        # Si FFmpeg ya est√° instalado, no hacemos nada
        print("üëå No es necesario instalar FFmpeg.")

# Permite que el script se ejecute desde la terminal, si este es importado en otro archivo, no se ejecutar√°
if __name__ == "__main__":
    main()

"""
Que es FFmpeg y por qu√© lo necesitamos?
FFmpeg es una herramienta de l√≠nea de comandos muy poderosa y vers√°til para procesar multimedia, es decir, trabajar con archivos de audio, 
video e incluso im√°genes. Se trata de una biblioteca y un conjunto de programas que permite grabar, convertir y transmitir archivos de audio y 
video en m√∫ltiples formatos.
Es de codigo abierto.

Lo usaremos en el proyecto para convertir archivos de audio y poner la pprtada:
1.- Es posible que los archivos de audio descargados no est√©n en el formato MP3 por defecto. FFmpeg permite convertir esos archivos a MP3, que 
es uno de los formatos m√°s populares y ampliamente utilizados para almacenar m√∫sica.
2.- FFmpeg tambi√©n se puede usar para agregar la imagen de la portada (que podr√≠as descargar junto con la m√∫sica) al archivo MP3.
El proceso de integrar la imagen de portada en el archivo MP3 (como metadato) se realiza para que la m√∫sica tenga una car√°tula cuando se 
reproduzca en un reproductor de m√∫sica.

"""
